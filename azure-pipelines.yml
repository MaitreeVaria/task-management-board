# Node.js Task Management Board CI/CD Pipeline
trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
- group: AWS-Deployment

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '20.x'
  displayName: 'Install Node.js'

- script: |
    cd backend
    npm install
  displayName: 'Install backend dependencies'

- script: |
    cd frontend
    npm install
    npm run build
  displayName: 'Install frontend dependencies and build'

- script: |
    echo "Skipping tests for now - no tests configured"
  displayName: 'Skip tests (no tests available)'

- task: CopyFiles@2
  inputs:
    contents: |
      backend/**
      frontend/dist/**
    targetFolder: '$(Build.ArtifactStagingDirectory)'
  displayName: 'Copy files for deployment'

- script: |
    echo "Build completed successfully!"
    echo "Backend built: âœ…"
    echo "Frontend built: âœ…"
    echo "Ready for deployment to AWS EC2"
  displayName: 'Build Summary'

# Deployment to AWS EC2
- script: |
    # Create .ssh directory if it doesn't exist
    mkdir -p ~/.ssh
    
    # Create SSH key file
    echo "$(SSH_KEY)" > ssh_key.pem
    chmod 600 ssh_key.pem
    
    # Add EC2 host to known hosts
    ssh-keyscan -H $(EC2_HOST) >> ~/.ssh/known_hosts
    
    echo "SSH setup completed âœ…"
  displayName: 'Setup SSH Connection'

- script: |
    # Deploy to EC2
    ssh -i ssh_key.pem -o StrictHostKeyChecking=no $(EC2_USER)@$(EC2_HOST) '
      echo "ðŸš€ Starting deployment..."
      
      # Navigate to project directory
      cd /home/ec2-user/task-management-board
      
      # Pull latest code from GitHub
      echo "ðŸ“¥ Pulling latest code..."
      git pull origin main
      
      # Update backend dependencies
      echo "ðŸ“¦ Updating backend..."
      cd backend
      npm install --production
      
      # Update frontend
      echo "ðŸŽ¨ Building frontend..."
      cd ../frontend
      npm install
      npm run build
      
      # Restart services with PM2
      echo "ðŸ”„ Restarting services..."
      sudo pm2 restart all
      
      # Check service status
      echo "âœ… Deployment completed!"
      sudo pm2 status
    '
  displayName: 'Deploy to AWS EC2'

- script: |
    # Cleanup
    rm -f ssh_key.pem
    echo "ðŸŽ‰ Pipeline completed successfully!"
    echo "Your app is now live at: http://$(EC2_HOST)"
  displayName: 'Cleanup and Success Message'