# Node.js Task Management Board CI/CD Pipeline
trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
- group: AWS-Deployment

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '20.x'
  displayName: 'Install Node.js'

- script: |
    cd backend
    npm install
  displayName: 'Install backend dependencies'

- script: |
    cd frontend
    npm install
    NODE_ENV=production npm run build
  displayName: 'Install frontend dependencies and build for production'

- script: |
    echo "Skipping tests for now - no tests configured"
  displayName: 'Skip tests (no tests available)'

- task: CopyFiles@2
  inputs:
    contents: |
      backend/**
      frontend/dist/**
    targetFolder: '$(Build.ArtifactStagingDirectory)'
  displayName: 'Copy files for deployment'

- script: |
    echo "Build completed successfully!"
    echo "Backend built: âœ…"
    echo "Frontend built for production: âœ…"
    echo "Ready for deployment to AWS EC2"
  displayName: 'Build Summary'

# Deployment to AWS EC2
- task: DownloadSecureFile@1
  name: sshkey
  inputs:
    secureFile: 'aws-ssh-key'
  displayName: 'Download SSH Key'

- script: |
    # Set up SSH
    mkdir -p ~/.ssh
    cp $(sshkey.secureFilePath) ~/.ssh/aws_key
    chmod 600 ~/.ssh/aws_key
    ssh-keyscan -H $(EC2_HOST) >> ~/.ssh/known_hosts
  displayName: 'Setup SSH'

- script: |
    # Deploy to EC2
    ssh -i ~/.ssh/aws_key -o StrictHostKeyChecking=no $(EC2_USER)@$(EC2_HOST) '
      cd /home/ec2-user/task-management-board &&
      git pull origin main &&
      cd backend && npm install --production &&
      cd ../frontend && npm install && NODE_ENV=production npm run build &&
      sudo pm2 restart all &&
      echo "âœ… Deployment completed!"
    '
  displayName: 'Deploy to AWS EC2'

- script: |
    # Cleanup
    rm -f ssh_key.pem
    echo "ðŸŽ‰ Pipeline completed successfully!"
    echo "Your app is now live at: http://$(EC2_HOST)"
  displayName: 'Cleanup and Success Message'